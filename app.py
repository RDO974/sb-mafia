import streamlit as st
import pandas as pd
from sklearn.ensemble import RandomForestClassifier

st.title("‚öΩ Sb Mafia ‚Äì Pr√©dictions IA + Confiance + Value Bet")

# Chargement des donn√©es
try:
    df = pd.read_csv("matches_today_form.csv")

    if all(col in df.columns for col in ["HForm", "AForm", "FTR"]):
        # Convertir la forme en score num√©rique
        def form_to_score(form):
            form = str(form)
            scores = {'W': 3, 'D': 1, 'L': 0}
            return sum([scores.get(c, 0) for c in form if c in scores]) / len(form)

        df["HFormScore"] = df["HForm"].apply(form_to_score)
        df["AFormScore"] = df["AForm"].apply(form_to_score)

        # S√©lection des donn√©es d'entra√Ænement
        train_df = df.dropna(subset=["FTR"])
        X_train = train_df[["HFormScore", "AFormScore"]]
        y_train = train_df["FTR"]

        # Mod√®le IA
        model = RandomForestClassifier()
        model.fit(X_train, y_train)

        # Pr√©dictions et probabilit√©s
        X_pred = df[["HFormScore", "AFormScore"]]
        df["Prediction"] = model.predict(X_pred)
        proba = model.predict_proba(X_pred)

        # Ajouter les probabilit√©s max (confiance)
        df["Confidence"] = proba.max(axis=1).round(2)

        st.success("‚úÖ Pr√©dictions g√©n√©r√©es avec taux de confiance.")
        st.dataframe(df[["HomeTeam", "AwayTeam", "HForm", "AForm", "Prediction", "Confidence"]])

        # Bouton Value Bet
        if st.button("üí° Afficher les Value Bets recommand√©s"):
            value_bets = df[df["Confidence"] >= 0.70]
            if not value_bets.empty:
                st.subheader("üìà Value Bets (confiance ‚â• 70%)")
                st.dataframe(value_bets[["HomeTeam", "AwayTeam", "Prediction", "Confidence"]])
            else:
                st.info("Aucun Value Bet trouv√© aujourd'hui.")
    else:
        st.error("‚ùå Le fichier CSV ne contient pas les colonnes : HForm, AForm, FTR")
except FileNotFoundError:
    st.error("‚ùå Fichier 'matches_today_form.csv' introuvable.")
except Exception as e:
    st.error(f"‚ùå Erreur : {e}")
